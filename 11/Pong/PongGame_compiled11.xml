<class>
	<keyword> class </keyword>
	<identifier>
		<name> PongGame </name>
		<type> className </type>
		<fieldCount> 7 </fieldCount>
	</identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> static </keyword>
		<identifier>
			<name> PongGame </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> instance </name>
			<type> PongGame </type>
			<index> 0 </index>
			<kind> static </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier>
			<name> Bat </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> bat </name>
			<type> Bat </type>
			<index> 0 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier>
			<name> Ball </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> ball </name>
			<type> Ball </type>
			<index> 1 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier>
			<name> wall </name>
			<type> int </type>
			<index> 2 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> boolean </keyword>
		<identifier>
			<name> exit </name>
			<type> boolean </type>
			<index> 3 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier>
			<name> score </name>
			<type> int </type>
			<index> 4 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier>
			<name> lastWall </name>
			<type> int </type>
			<index> 5 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier>
			<name> batWidth </name>
			<type> int </type>
			<index> 6 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier>
			<name> PongGame </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> new </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Screen </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> clearScreen </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> batWidth </name>
						<type> int </type>
						<index> 6 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 50 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> bat </name>
						<type> Bat </type>
						<index> 0 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> Bat </name>
								<type> className </type>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> new </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 230 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 229 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<identifier>
											<name> batWidth </name>
											<type> int </type>
											<index> 6 </index>
											<kind> field </kind>
										</identifier>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 7 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> ball </name>
						<type> Ball </type>
						<index> 1 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> Ball </name>
								<type> className </type>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> new </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 253 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 222 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 511 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 229 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> ball </name>
						<type> Ball </type>
						<index> 1 </index>
						<kind> field </kind>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> setDestination </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 400 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Screen </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> drawRectangle </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 238 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 511 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 240 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Output </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> moveCursor </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 22 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Output </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> printString </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<stringConstant> Score: 0 </stringConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> exit </name>
						<type> boolean </type>
						<index> 3 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> score </name>
						<type> int </type>
						<index> 4 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> wall </name>
						<type> int </type>
						<index> 2 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> lastWall </name>
						<type> int </type>
						<index> 5 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> dispose </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> bat </name>
						<type> Bat </type>
						<index> 0 </index>
						<kind> field </kind>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> dispose </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> ball </name>
						<type> Ball </type>
						<index> 1 </index>
						<kind> field </kind>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> dispose </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Memory </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> deAlloc </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> newInstance </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> instance </name>
						<type> PongGame </type>
						<index> 0 </index>
						<kind> static </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> PongGame </name>
								<type> className </type>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> new </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<identifier>
			<name> PongGame </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> getInstance </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier>
								<name> instance </name>
								<type> PongGame </type>
								<index> 0 </index>
								<kind> static </kind>
							</identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> run </name>
			<type> subroutineName </type>
			<localCount> 1 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier>
					<name> key </name>
					<type> char </type>
					<index> 0 </index>
					<kind> local </kind>
				</identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<identifier>
									<name> exit </name>
									<type> boolean </type>
									<index> 3 </index>
									<kind> field </kind>
								</identifier>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier>
												<name> key </name>
												<type> char </type>
												<index> 0 </index>
												<kind> local </kind>
											</identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &amp; </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<identifier>
													<name> exit </name>
													<type> boolean </type>
													<index> 3 </index>
													<kind> field </kind>
												</identifier>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier>
												<name> Keyboard </name>
												<type> className </type>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> keyPressed </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> bat </name>
										<type> Bat </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> move </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> moveBall </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> Sys </name>
										<type> className </type>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> wait </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 50 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 130 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> bat </name>
										<type> Bat </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> setDirection </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
							<keyword> else </keyword>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier>
												<name> key </name>
												<type> char </type>
												<index> 0 </index>
												<kind> local </kind>
											</identifier>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 132 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<doStatement>
											<keyword> do </keyword>
											<identifier>
												<name> bat </name>
												<type> Bat </type>
												<index> 0 </index>
												<kind> field </kind>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> setDirection </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant> 2 </integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
									</statements>
									<symbol> } </symbol>
									<keyword> else </keyword>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier>
														<name> key </name>
														<type> char </type>
														<index> 0 </index>
														<kind> local </kind>
													</identifier>
												</term>
												<symbol> = </symbol>
												<term>
													<integerConstant> 140 </integerConstant>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier>
														<name> exit </name>
														<type> boolean </type>
														<index> 3 </index>
														<kind> field </kind>
													</identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<keyword> true </keyword>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<identifier>
															<name> key </name>
															<type> char </type>
															<index> 0 </index>
															<kind> local </kind>
														</identifier>
													</term>
													<symbol> = </symbol>
													<term>
														<integerConstant> 0 </integerConstant>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
								<symbol> &amp; </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<identifier>
													<name> exit </name>
													<type> boolean </type>
													<index> 3 </index>
													<kind> field </kind>
												</identifier>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier>
												<name> Keyboard </name>
												<type> className </type>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> keyPressed </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> bat </name>
										<type> Bat </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> move </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> moveBall </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> Sys </name>
										<type> className </type>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> wait </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 50 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> exit </name>
								<type> boolean </type>
								<index> 3 </index>
								<kind> field </kind>
							</identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> Output </name>
								<type> className </type>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> moveCursor </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 10 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 27 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> Output </name>
								<type> className </type>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> printString </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<stringConstant> Game Over </stringConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> moveBall </name>
			<type> subroutineName </type>
			<localCount> 5 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier>
					<name> bouncingDirection </name>
					<type> int </type>
					<index> 0 </index>
					<kind> local </kind>
				</identifier>
				<symbol> , </symbol>
				<identifier>
					<name> batLeft </name>
					<type> int </type>
					<index> 1 </index>
					<kind> local </kind>
				</identifier>
				<symbol> , </symbol>
				<identifier>
					<name> batRight </name>
					<type> int </type>
					<index> 2 </index>
					<kind> local </kind>
				</identifier>
				<symbol> , </symbol>
				<identifier>
					<name> ballLeft </name>
					<type> int </type>
					<index> 3 </index>
					<kind> local </kind>
				</identifier>
				<symbol> , </symbol>
				<identifier>
					<name> ballRight </name>
					<type> int </type>
					<index> 4 </index>
					<kind> local </kind>
				</identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> wall </name>
						<type> int </type>
						<index> 2 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> ball </name>
								<type> Ball </type>
								<index> 1 </index>
								<kind> field </kind>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> move </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> wall </name>
										<type> int </type>
										<index> 2 </index>
										<kind> field </kind>
									</identifier>
								</term>
								<symbol> &gt; </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> &amp; </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier>
													<name> wall </name>
													<type> int </type>
													<index> 2 </index>
													<kind> field </kind>
												</identifier>
											</term>
											<symbol> = </symbol>
											<term>
												<identifier>
													<name> lastWall </name>
													<type> int </type>
													<index> 5 </index>
													<kind> field </kind>
												</identifier>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> lastWall </name>
								<type> int </type>
								<index> 5 </index>
								<kind> field </kind>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> wall </name>
										<type> int </type>
										<index> 2 </index>
										<kind> field </kind>
									</identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> bouncingDirection </name>
								<type> int </type>
								<index> 0 </index>
								<kind> local </kind>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> batLeft </name>
								<type> int </type>
								<index> 1 </index>
								<kind> local </kind>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> bat </name>
										<type> Bat </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> getLeft </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> batRight </name>
								<type> int </type>
								<index> 2 </index>
								<kind> local </kind>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> bat </name>
										<type> Bat </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> getRight </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> ballLeft </name>
								<type> int </type>
								<index> 3 </index>
								<kind> local </kind>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> ball </name>
										<type> Ball </type>
										<index> 1 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> getLeft </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier>
								<name> ballRight </name>
								<type> int </type>
								<index> 4 </index>
								<kind> local </kind>
							</identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier>
										<name> ball </name>
										<type> Ball </type>
										<index> 1 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> getRight </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> wall </name>
										<type> int </type>
										<index> 2 </index>
										<kind> field </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 4 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> exit </name>
										<type> boolean </type>
										<index> 3 </index>
										<kind> field </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier>
														<name> batLeft </name>
														<type> int </type>
														<index> 1 </index>
														<kind> local </kind>
													</identifier>
												</term>
												<symbol> &gt; </symbol>
												<term>
													<identifier>
														<name> ballRight </name>
														<type> int </type>
														<index> 4 </index>
														<kind> local </kind>
													</identifier>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
										<symbol> | </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier>
														<name> batRight </name>
														<type> int </type>
														<index> 2 </index>
														<kind> local </kind>
													</identifier>
												</term>
												<symbol> &lt; </symbol>
												<term>
													<identifier>
														<name> ballLeft </name>
														<type> int </type>
														<index> 3 </index>
														<kind> local </kind>
													</identifier>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> ~ </symbol>
											<term>
												<identifier>
													<name> exit </name>
													<type> boolean </type>
													<index> 3 </index>
													<kind> field </kind>
												</identifier>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier>
														<name> ballRight </name>
														<type> int </type>
														<index> 4 </index>
														<kind> local </kind>
													</identifier>
												</term>
												<symbol> &lt; </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier>
																<name> batLeft </name>
																<type> int </type>
																<index> 1 </index>
																<kind> local </kind>
															</identifier>
														</term>
														<symbol> + </symbol>
														<term>
															<integerConstant> 10 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<letStatement>
													<keyword> let </keyword>
													<identifier>
														<name> bouncingDirection </name>
														<type> int </type>
														<index> 0 </index>
														<kind> local </kind>
													</identifier>
													<symbol> = </symbol>
													<expression>
														<term>
															<symbol> - </symbol>
															<term>
																<integerConstant> 1 </integerConstant>
															</term>
														</term>
													</expression>
													<symbol> ; </symbol>
												</letStatement>
											</statements>
											<symbol> } </symbol>
											<keyword> else </keyword>
											<symbol> { </symbol>
											<statements>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier>
																<name> ballLeft </name>
																<type> int </type>
																<index> 3 </index>
																<kind> local </kind>
															</identifier>
														</term>
														<symbol> &gt; </symbol>
														<term>
															<symbol> ( </symbol>
															<expression>
																<term>
																	<identifier>
																		<name> batRight </name>
																		<type> int </type>
																		<index> 2 </index>
																		<kind> local </kind>
																	</identifier>
																</term>
																<symbol> - </symbol>
																<term>
																	<integerConstant> 10 </integerConstant>
																</term>
															</expression>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<letStatement>
															<keyword> let </keyword>
															<identifier>
																<name> bouncingDirection </name>
																<type> int </type>
																<index> 0 </index>
																<kind> local </kind>
															</identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<integerConstant> 1 </integerConstant>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier>
												<name> batWidth </name>
												<type> int </type>
												<index> 6 </index>
												<kind> field </kind>
											</identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier>
														<name> batWidth </name>
														<type> int </type>
														<index> 6 </index>
														<kind> field </kind>
													</identifier>
												</term>
												<symbol> - </symbol>
												<term>
													<integerConstant> 2 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier>
												<name> bat </name>
												<type> Bat </type>
												<index> 0 </index>
												<kind> field </kind>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> setWidth </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<identifier>
															<name> batWidth </name>
															<type> int </type>
															<index> 6 </index>
															<kind> field </kind>
														</identifier>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier>
												<name> score </name>
												<type> int </type>
												<index> 4 </index>
												<kind> field </kind>
											</identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier>
														<name> score </name>
														<type> int </type>
														<index> 4 </index>
														<kind> field </kind>
													</identifier>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier>
												<name> Output </name>
												<type> className </type>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> moveCursor </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant> 22 </integerConstant>
													</term>
												</expression>
												<symbol> , </symbol>
												<expression>
													<term>
														<integerConstant> 7 </integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier>
												<name> Output </name>
												<type> className </type>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> printInt </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<identifier>
															<name> score </name>
															<type> int </type>
															<index> 4 </index>
															<kind> field </kind>
														</identifier>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> ball </name>
								<type> Ball </type>
								<index> 1 </index>
								<kind> field </kind>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> bounce </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier>
											<name> bouncingDirection </name>
											<type> int </type>
											<index> 0 </index>
											<kind> local </kind>
										</identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>