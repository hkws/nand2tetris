<class>
	<keyword> class </keyword>
	<identifier>
		<name> SquareGame </name>
		<type> className </type>
		<fieldCount> 2 </fieldCount>
	</identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<identifier>
			<name> Square </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> square </name>
			<type> Square </type>
			<index> 0 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier>
			<name> direction </name>
			<type> int </type>
			<index> 1 </index>
			<kind> field </kind>
		</identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier>
			<name> SquareGame </name>
			<type> className </type>
		</identifier>
		<identifier>
			<name> new </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> square </name>
						<type> Square </type>
						<index> 0 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier>
								<name> Square </name>
								<type> className </type>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> new </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 30 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> direction </name>
						<type> int </type>
						<index> 1 </index>
						<kind> field </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<returnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> dispose </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> square </name>
						<type> Square </type>
						<index> 0 </index>
						<kind> field </kind>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> dispose </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Memory </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> deAlloc </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> moveSquare </name>
			<type> subroutineName </type>
			<localCount> 0 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> direction </name>
								<type> int </type>
								<index> 1 </index>
								<kind> field </kind>
							</identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> square </name>
								<type> Square </type>
								<index> 0 </index>
								<kind> field </kind>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> moveUp </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> direction </name>
								<type> int </type>
								<index> 1 </index>
								<kind> field </kind>
							</identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 2 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> square </name>
								<type> Square </type>
								<index> 0 </index>
								<kind> field </kind>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> moveDown </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> direction </name>
								<type> int </type>
								<index> 1 </index>
								<kind> field </kind>
							</identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 3 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> square </name>
								<type> Square </type>
								<index> 0 </index>
								<kind> field </kind>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> moveLeft </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier>
								<name> direction </name>
								<type> int </type>
								<index> 1 </index>
								<kind> field </kind>
							</identifier>
						</term>
						<symbol> = </symbol>
						<term>
							<integerConstant> 4 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier>
								<name> square </name>
								<type> Square </type>
								<index> 0 </index>
								<kind> field </kind>
							</identifier>
							<symbol> . </symbol>
							<identifier>
								<name> moveRight </name>
								<type> subroutineName </type>
							</identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier>
						<name> Sys </name>
						<type> className </type>
					</identifier>
					<symbol> . </symbol>
					<identifier>
						<name> wait </name>
						<type> subroutineName </type>
					</identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 5 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier>
			<name> run </name>
			<type> subroutineName </type>
			<localCount> 2 </localCount>
		</identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier>
					<name> key </name>
					<type> char </type>
					<index> 0 </index>
					<kind> local </kind>
				</identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<identifier>
					<name> exit </name>
					<type> boolean </type>
					<index> 1 </index>
					<kind> local </kind>
				</identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier>
						<name> exit </name>
						<type> boolean </type>
						<index> 1 </index>
						<kind> local </kind>
					</identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<identifier>
									<name> exit </name>
									<type> boolean </type>
									<index> 1 </index>
									<kind> local </kind>
								</identifier>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier>
												<name> Keyboard </name>
												<type> className </type>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> keyPressed </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> moveSquare </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 81 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> exit </name>
										<type> boolean </type>
										<index> 1 </index>
										<kind> local </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<keyword> true </keyword>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 90 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> square </name>
										<type> Square </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> decSize </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 88 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> square </name>
										<type> Square </type>
										<index> 0 </index>
										<kind> field </kind>
									</identifier>
									<symbol> . </symbol>
									<identifier>
										<name> incSize </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 131 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> direction </name>
										<type> int </type>
										<index> 1 </index>
										<kind> field </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 133 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> direction </name>
										<type> int </type>
										<index> 1 </index>
										<kind> field </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 130 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> direction </name>
										<type> int </type>
										<index> 1 </index>
										<kind> field </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 3 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
								</term>
								<symbol> = </symbol>
								<term>
									<integerConstant> 132 </integerConstant>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> direction </name>
										<type> int </type>
										<index> 1 </index>
										<kind> field </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<integerConstant> 4 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<symbol> ~ </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<identifier>
													<name> key </name>
													<type> char </type>
													<index> 0 </index>
													<kind> local </kind>
												</identifier>
											</term>
											<symbol> = </symbol>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier>
										<name> key </name>
										<type> char </type>
										<index> 0 </index>
										<kind> local </kind>
									</identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier>
												<name> Keyboard </name>
												<type> className </type>
											</identifier>
											<symbol> . </symbol>
											<identifier>
												<name> keyPressed </name>
												<type> subroutineName </type>
											</identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier>
										<name> moveSquare </name>
										<type> subroutineName </type>
									</identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>