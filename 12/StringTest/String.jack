// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int max;
    static int intOrder;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if ((maxLength < 0) | (maxLength = 0)){
            let str = null;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let max = maxLength;
        let intOrder = 5;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(str = null)){
            do str.dispose();
        }
        let str = null;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j > length) | (j < 0)){
            return -1;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > length) | (j < 0)){
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length + 1 > max){
            return null;
        }
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length - 1 < 0){
            return;
        }
        let str[length] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, v, c;
        var boolean neg;
        let i = 0;
        let v = 0;
        let c = 0;

        if (str[0] = 45){
            let neg = true;
            let i = 1;
        }

        while(i < length){
            let c = str[i];
            if ((c < 48) | (57 < c)){
                return v;
            }
            let v = (v * 10) + (c - 48);
            let i = i + 1;
        }

        if (neg){
            return -v;
        }
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int base, i, q;
        let base = 1;
        let i = 0;
        
        let length = 0;
        
        if (val = 0) {
            do appendChar(48);
            return;
        }

        if (val < 0) {
            do appendChar(45);
            let val = Math.abs(val);
        }

        while(i < (intOrder - 1)){
            let base = base * 10;
            let i = i + 1;
        }

        while((base > 1) | (base = 1)){
            let q = val / base;
            if ((0 < q) & (q < 10)){
                do appendChar(q + 48);  // ASCII code
                let val = val - (q * base);
            }
            let base = base / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
