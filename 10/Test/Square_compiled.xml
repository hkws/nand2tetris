<?xml version="1.0" ?>
<class>
	 
	<keyword> class </keyword>
	<identifier> SquareGame </identifier>
	<symbol> { </symbol>
	<classVarDec>
		 
		<keyword> field </keyword>
		<identifier> Square </identifier>
		<identifier> square </identifier>
		<symbol> ; </symbol>
		 
	</classVarDec>
	<classVarDec>
		 
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
		 
	</classVarDec>
	<subroutineDec>
		 
		<keyword> constructor </keyword>
		<identifier> SquareGame </identifier>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<subroutineBody>
			 
			<symbol> { </symbol>
			<statements>
				 
				<statement>
					 
					<letStatement>
						 
						<keyword> let </keyword>
						<identifier> square </identifier>
						<symbol> = </symbol>
						<expression>
							 
							<term>
								 
								<subroutineCall>
									 
									<identifier> Square </identifier>
									<symbol> . </symbol>
									<identifier> new </identifier>
									<symbol> ( </symbol>
									<expressionList>
										 
										<expression>
											 
											<term>
												 
												<integerConstant> 0 </integerConstant>
												 
											</term>
											 
										</expression>
										<symbol> , </symbol>
										<expression>
											 
											<term>
												 
												<integerConstant> 0 </integerConstant>
												 
											</term>
											 
										</expression>
										<symbol> , </symbol>
										<expression>
											 
											<term>
												 
												<integerConstant> 30 </integerConstant>
												 
											</term>
											 
										</expression>
										 
									</expressionList>
									<symbol> ) </symbol>
									 
								</subroutineCall>
								 
							</term>
							 
						</expression>
						<symbol> ; </symbol>
						 
					</letStatement>
					 
				</statement>
				<statement>
					 
					<letStatement>
						 
						<keyword> let </keyword>
						<identifier> direction </identifier>
						<symbol> = </symbol>
						<expression>
							 
							<term>
								 
								<integerConstant> 0 </integerConstant>
								 
							</term>
							 
						</expression>
						<symbol> ; </symbol>
						 
					</letStatement>
					 
				</statement>
				<statement>
					 
					<returnStatement>
						 
						<keyword> return </keyword>
						<expression>
							 
							<term>
								 
								<keyword> this </keyword>
								 
							</term>
							 
						</expression>
						<symbol> ; </symbol>
						 
					</returnStatement>
					 
				</statement>
				 
			</statements>
			<symbol> } </symbol>
			 
		</subroutineBody>
		 
	</subroutineDec>
	<subroutineDec>
		 
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<subroutineBody>
			 
			<symbol> { </symbol>
			<statements>
				 
				<statement>
					 
					<doStatement>
						 
						<keyword> do </keyword>
						<subroutineCall>
							 
							<identifier> square </identifier>
							<symbol> . </symbol>
							<identifier> dispose </identifier>
							<symbol> ( </symbol>
							<symbol> ) </symbol>
							 
						</subroutineCall>
						<symbol> ; </symbol>
						 
					</doStatement>
					 
				</statement>
				<statement>
					 
					<doStatement>
						 
						<keyword> do </keyword>
						<subroutineCall>
							 
							<identifier> Memory </identifier>
							<symbol> . </symbol>
							<identifier> deAlloc </identifier>
							<symbol> ( </symbol>
							<expressionList>
								 
								<expression>
									 
									<term>
										 
										<keyword> this </keyword>
										 
									</term>
									 
								</expression>
								 
							</expressionList>
							<symbol> ) </symbol>
							 
						</subroutineCall>
						<symbol> ; </symbol>
						 
					</doStatement>
					 
				</statement>
				<statement>
					 
					<returnStatement>
						 
						<keyword> return </keyword>
						<symbol> ; </symbol>
						 
					</returnStatement>
					 
				</statement>
				 
			</statements>
			<symbol> } </symbol>
			 
		</subroutineBody>
		 
	</subroutineDec>
	<subroutineDec>
		 
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> moveSquare </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<subroutineBody>
			 
			<symbol> { </symbol>
			<statements>
				 
				<statement>
					 
					<ifStatement>
						 
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							 
							<term>
								 
								<identifier> direction </identifier>
								 
							</term>
							<symbol> = </symbol>
							<term>
								 
								<integerConstant> 1 </integerConstant>
								 
							</term>
							 
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							 
							<statement>
								 
								<doStatement>
									 
									<keyword> do </keyword>
									<subroutineCall>
										 
										<identifier> square </identifier>
										<symbol> . </symbol>
										<identifier> moveUp </identifier>
										<symbol> ( </symbol>
										<symbol> ) </symbol>
										 
									</subroutineCall>
									<symbol> ; </symbol>
									 
								</doStatement>
								 
							</statement>
							 
						</statements>
						<symbol> } </symbol>
						 
					</ifStatement>
					 
				</statement>
				<statement>
					 
					<ifStatement>
						 
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							 
							<term>
								 
								<identifier> direction </identifier>
								 
							</term>
							<symbol> = </symbol>
							<term>
								 
								<integerConstant> 2 </integerConstant>
								 
							</term>
							 
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							 
							<statement>
								 
								<doStatement>
									 
									<keyword> do </keyword>
									<subroutineCall>
										 
										<identifier> square </identifier>
										<symbol> . </symbol>
										<identifier> moveDown </identifier>
										<symbol> ( </symbol>
										<symbol> ) </symbol>
										 
									</subroutineCall>
									<symbol> ; </symbol>
									 
								</doStatement>
								 
							</statement>
							 
						</statements>
						<symbol> } </symbol>
						 
					</ifStatement>
					 
				</statement>
				<statement>
					 
					<ifStatement>
						 
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							 
							<term>
								 
								<identifier> direction </identifier>
								 
							</term>
							<symbol> = </symbol>
							<term>
								 
								<integerConstant> 3 </integerConstant>
								 
							</term>
							 
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							 
							<statement>
								 
								<doStatement>
									 
									<keyword> do </keyword>
									<subroutineCall>
										 
										<identifier> square </identifier>
										<symbol> . </symbol>
										<identifier> moveLeft </identifier>
										<symbol> ( </symbol>
										<symbol> ) </symbol>
										 
									</subroutineCall>
									<symbol> ; </symbol>
									 
								</doStatement>
								 
							</statement>
							 
						</statements>
						<symbol> } </symbol>
						 
					</ifStatement>
					 
				</statement>
				<statement>
					 
					<ifStatement>
						 
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							 
							<term>
								 
								<identifier> direction </identifier>
								 
							</term>
							<symbol> = </symbol>
							<term>
								 
								<integerConstant> 4 </integerConstant>
								 
							</term>
							 
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							 
							<statement>
								 
								<doStatement>
									 
									<keyword> do </keyword>
									<subroutineCall>
										 
										<identifier> square </identifier>
										<symbol> . </symbol>
										<identifier> moveRight </identifier>
										<symbol> ( </symbol>
										<symbol> ) </symbol>
										 
									</subroutineCall>
									<symbol> ; </symbol>
									 
								</doStatement>
								 
							</statement>
							 
						</statements>
						<symbol> } </symbol>
						 
					</ifStatement>
					 
				</statement>
				<statement>
					 
					<doStatement>
						 
						<keyword> do </keyword>
						<subroutineCall>
							 
							<identifier> Sys </identifier>
							<symbol> . </symbol>
							<identifier> wait </identifier>
							<symbol> ( </symbol>
							<expressionList>
								 
								<expression>
									 
									<term>
										 
										<integerConstant> 5 </integerConstant>
										 
									</term>
									 
								</expression>
								 
							</expressionList>
							<symbol> ) </symbol>
							 
						</subroutineCall>
						<symbol> ; </symbol>
						 
					</doStatement>
					 
				</statement>
				<statement>
					 
					<returnStatement>
						 
						<keyword> return </keyword>
						<symbol> ; </symbol>
						 
					</returnStatement>
					 
				</statement>
				 
			</statements>
			<symbol> } </symbol>
			 
		</subroutineBody>
		 
	</subroutineDec>
	<subroutineDec>
		 
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> run </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<subroutineBody>
			 
			<symbol> { </symbol>
			<varDec>
				 
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier> key </identifier>
				<symbol> ; </symbol>
				 
			</varDec>
			<varDec>
				 
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<identifier> exit </identifier>
				<symbol> ; </symbol>
				 
			</varDec>
			<statements>
				 
				<statement>
					 
					<letStatement>
						 
						<keyword> let </keyword>
						<identifier> exit </identifier>
						<symbol> = </symbol>
						<expression>
							 
							<term>
								 
								<keyword> false </keyword>
								 
							</term>
							 
						</expression>
						<symbol> ; </symbol>
						 
					</letStatement>
					 
				</statement>
				<statement>
					 
					<whileStatement>
						 
						<keyword> while </keyword>
						<symbol> ( </symbol>
						<expression>
							 
							<term>
								 
								<symbol> ~ </symbol>
								<term>
									 
									<identifier> exit </identifier>
									 
								</term>
								 
							</term>
							 
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							 
							<statement>
								 
								<whileStatement>
									 
									<keyword> while </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 0 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> key </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<subroutineCall>
															 
															<identifier> Keyboard </identifier>
															<symbol> . </symbol>
															<identifier> keyPressed </identifier>
															<symbol> ( </symbol>
															<symbol> ) </symbol>
															 
														</subroutineCall>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										<statement>
											 
											<doStatement>
												 
												<keyword> do </keyword>
												<subroutineCall>
													 
													<identifier> moveSquare </identifier>
													<symbol> ( </symbol>
													<symbol> ) </symbol>
													 
												</subroutineCall>
												<symbol> ; </symbol>
												 
											</doStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</whileStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 81 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> exit </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<keyword> true </keyword>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 90 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<doStatement>
												 
												<keyword> do </keyword>
												<subroutineCall>
													 
													<identifier> square </identifier>
													<symbol> . </symbol>
													<identifier> decSize </identifier>
													<symbol> ( </symbol>
													<symbol> ) </symbol>
													 
												</subroutineCall>
												<symbol> ; </symbol>
												 
											</doStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 88 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<doStatement>
												 
												<keyword> do </keyword>
												<subroutineCall>
													 
													<identifier> square </identifier>
													<symbol> . </symbol>
													<identifier> incSize </identifier>
													<symbol> ( </symbol>
													<symbol> ) </symbol>
													 
												</subroutineCall>
												<symbol> ; </symbol>
												 
											</doStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 131 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> direction </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<integerConstant> 1 </integerConstant>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 133 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> direction </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<integerConstant> 2 </integerConstant>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 130 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> direction </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<integerConstant> 3 </integerConstant>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<ifStatement>
									 
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<identifier> key </identifier>
											 
										</term>
										<symbol> = </symbol>
										<term>
											 
											<integerConstant> 132 </integerConstant>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> direction </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<integerConstant> 4 </integerConstant>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</ifStatement>
								 
							</statement>
							<statement>
								 
								<whileStatement>
									 
									<keyword> while </keyword>
									<symbol> ( </symbol>
									<expression>
										 
										<term>
											 
											<symbol> ~ </symbol>
											<term>
												 
												<symbol> ( </symbol>
												<expression>
													 
													<term>
														 
														<identifier> key </identifier>
														 
													</term>
													<symbol> = </symbol>
													<term>
														 
														<integerConstant> 0 </integerConstant>
														 
													</term>
													 
												</expression>
												<symbol> ) </symbol>
												 
											</term>
											 
										</term>
										 
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										 
										<statement>
											 
											<letStatement>
												 
												<keyword> let </keyword>
												<identifier> key </identifier>
												<symbol> = </symbol>
												<expression>
													 
													<term>
														 
														<subroutineCall>
															 
															<identifier> Keyboard </identifier>
															<symbol> . </symbol>
															<identifier> keyPressed </identifier>
															<symbol> ( </symbol>
															<symbol> ) </symbol>
															 
														</subroutineCall>
														 
													</term>
													 
												</expression>
												<symbol> ; </symbol>
												 
											</letStatement>
											 
										</statement>
										<statement>
											 
											<doStatement>
												 
												<keyword> do </keyword>
												<subroutineCall>
													 
													<identifier> moveSquare </identifier>
													<symbol> ( </symbol>
													<symbol> ) </symbol>
													 
												</subroutineCall>
												<symbol> ; </symbol>
												 
											</doStatement>
											 
										</statement>
										 
									</statements>
									<symbol> } </symbol>
									 
								</whileStatement>
								 
							</statement>
							 
						</statements>
						<symbol> } </symbol>
						 
					</whileStatement>
					 
				</statement>
				<statement>
					 
					<returnStatement>
						 
						<keyword> return </keyword>
						<symbol> ; </symbol>
						 
					</returnStatement>
					 
				</statement>
				 
			</statements>
			<symbol> } </symbol>
			 
		</subroutineBody>
		 
	</subroutineDec>
	<symbol> } </symbol>
	 
</class>
